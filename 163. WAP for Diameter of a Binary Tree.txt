class TreeNode {
    constructor(value) {
        this.value = value;
        this.children = [];
    }
}

const findFurthestNode = (node, parent = null) => {
    let furthestNode = node;
    let maxDistance = 0;

    const dfs = (current, distance) => {
        if (distance > maxDistance) {
            maxDistance = distance;
            furthestNode = current;
        }
        for (const child of current.children) {
            if (child !== parent) {
                dfs(child, distance + 1);
            }
        }
    };

    dfs(node, 0);
    return { node: furthestNode, distance: maxDistance };
};

const findTreeDiameter = (root) => {
    if (!root) return 0;

    // Find the furthest node from the root
    const { node: firstFurthestNode } = findFurthestNode(root);

    // Find the furthest node from the first furthest node
    const { distance: diameter } = findFurthestNode(firstFurthestNode);

    return diameter;
};

// Example usage:
const root = new TreeNode(1);
const node2 = new TreeNode(2);
const node3 = new TreeNode(3);
const node4 = new TreeNode(4);
const node5 = new TreeNode(5);
const node6 = new TreeNode(6);
const node7 = new TreeNode(7);
const node8 = new TreeNode(8);
const node9 = new TreeNode(9);
const node10 = new TreeNode(10);

root.children.push(node2, node3);
node2.children.push(node4, node5);
node3.children.push(node6);
node4.children.push(node7);
node5.children.push(node8);
node6.children.push(node9);
node7.children.push(node10);

console.log(findTreeDiameter(root)); // Outputs: 6
