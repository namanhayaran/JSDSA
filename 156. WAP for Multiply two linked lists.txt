class ListNode {
  constructor(value = 0, next = null) {
    this.value = value;
    this.next = next;
  }
}

// Helper function to convert a linked list to a number
function linkedListToNumber(list) {
  let num = 0;
  let current = list;
  while (current) {
    num = num * 10 + current.value;
    current = current.next;
  }
  return num;
}

// Helper function to convert a number to a linked list
function numberToLinkedList(num) {
  if (num === 0) return new ListNode(0);

  let head = null;
  let current = null;
  while (num > 0) {
    const digit = num % 10;
    num = Math.floor(num / 10);
    const newNode = new ListNode(digit);
    if (!head) {
      head = newNode;
    } else {
      current.next = newNode;
    }
    current = newNode;
  }

  // Reverse the linked list to get the correct order
  let prev = null;
  current = head;
  while (current) {
    const next = current.next;
    current.next = prev;
    prev = current;
    current = next;
  }
  return prev;
}

// Function to multiply two linked lists
function multiplyLinkedLists(list1, list2) {
  const num1 = linkedListToNumber(list1);
  const num2 = linkedListToNumber(list2);
  const product = num1 * num2;
  return numberToLinkedList(product);
}

// Example usage:

// Linked list 1: 3 -> 4 -> 2 (representing the number 342)
const list1 = new ListNode(3, new ListNode(4, new ListNode(2)));

// Linked list 2: 4 -> 6 -> 5 (representing the number 465)
const list2 = new ListNode(4, new ListNode(6, new ListNode(5)));

const result = multiplyLinkedLists(list1, list2);

// Function to print linked list
function printLinkedList(list) {
  let current = list;
  const result = [];
  while (current) {
    result.push(current.value);
    current = current.next;
  }
  console.log(result.join(' -> '));
}

printLinkedList(result); // Output should represent the number 342 * 465
