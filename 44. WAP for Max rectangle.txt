function maximalRectangle(matrix) {
  if (!matrix.length || !matrix[0].length) return 0;

  const n = matrix.length;
  const m = matrix[0].length;
  const heights = Array(m).fill(0);
  let maxArea = 0;

  for (let row = 0; row < n; row++) {
    for (let col = 0; col < m; col++) {
      // Update the height of histograms
      heights[col] = matrix[row][col] == 1 ? heights[col] + 1 : 0;
    }
    // Calculate the max area for the "histogram" represented by this row
    maxArea = Math.max(maxArea, largestRectangleArea(heights));
  }

  return maxArea;
}

function largestRectangleArea(heights) {
  let maxArea = 0;
  const stack = [];
  heights = [...heights, 0]; // Add a sentinel to ensure the stack empties

  for (let i = 0; i < heights.length; i++) {
    while (stack.length > 0 && heights[i] < heights[stack[stack.length - 1]]) {
      const height = heights[stack.pop()];
      const width = stack.length === 0 ? i : i - stack[stack.length - 1] - 1;
      maxArea = Math.max(maxArea, height * width);
    }
    stack.push(i);
  }

  return maxArea;
}

// Example usage
const M = [
  [0, 1, 1, 0],
  [1, 1, 1, 1],
  [1, 1, 1, 1],
  [1, 1, 0, 0]
];
console.log(maximalRectangle(M)); // Output: 8
