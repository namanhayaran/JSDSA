class ListNode {
    constructor(value) {
        this.value = value;
        this.next = null;
    }
}

function createLinkedList(values, pos) {
    if (values.length === 0) return null;

    let head = new ListNode(values[0]);
    let currentNode = head;
    let loopNode = null;

    for (let i = 1; i < values.length; i++) {
        currentNode.next = new ListNode(values[i]);
        currentNode = currentNode.next;
        if (i === pos - 1) {
            loopNode = currentNode;
        }
    }

    // Creating a loop if pos is valid
    if (pos > 0) {
        currentNode.next = loopNode;
    }

    return head;
}

function hasCycle(head) {
    if (head === null) return false;

    let slow = head;
    let fast = head;

    while (fast !== null && fast.next !== null) {
        slow = slow.next;
        fast = fast.next.next;

        if (slow === fast) {
            return true;
        }
    }

    return false;
}

// Test case 1
let n1 = 3;
let values1 = [1, 3, 4];
let pos1 = 2;
let head1 = createLinkedList(values1, pos1);
console.log(hasCycle(head1));  // Output: true

// Test case 2
let n2 = 3;
let values2 = [1, 3, 4];
let pos2 = 0;
let head2 = createLinkedList(values2, pos2);
console.log(hasCycle(head2));  // Output: false

// Test case 3
let n3 = 5;
let values3 = [1, 2, 3, 4, 5];
let pos3 = 3;
let head3 = createLinkedList(values3, pos3);
console.log(hasCycle(head3));  // Output: true
