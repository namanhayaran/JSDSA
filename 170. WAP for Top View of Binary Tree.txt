class Node {
    constructor(data) {
        this.data = data;
        this.left = null;
        this.right = null;
    }
}

function topView(root) {
    if (!root) return [];

    // Map to store the topmost node at each horizontal distance
    const topViewMap = new Map();
    
    // Queue to store the nodes along with their horizontal distance
    const queue = [];
    queue.push({ node: root, hd: 0 });

    while (queue.length > 0) {
        const { node, hd } = queue.shift();

        // If horizontal distance is not already seen, add the node data to the map
        if (!topViewMap.has(hd)) {
            topViewMap.set(hd, node.data);
        }

        // Enqueue left and right children with their corresponding horizontal distance
        if (node.left) {
            queue.push({ node: node.left, hd: hd - 1 });
        }
        if (node.right) {
            queue.push({ node: node.right, hd: hd + 1 });
        }
    }

    // Extract the top view from the map, sorted by horizontal distance
    const topViewNodes = [];
    const sortedKeys = Array.from(topViewMap.keys()).sort((a, b) => a - b);

    for (const key of sortedKeys) {
        topViewNodes.push(topViewMap.get(key));
    }

    return topViewNodes;
}

// Example usage:

// Construct the binary tree
const root = new Node(1);
root.left = new Node(2);
root.right = new Node(3);
root.left.left = new Node(4);
root.left.right = new Node(5);
root.right.left = new Node(6);
root.right.right = new Node(7);

const topViewResult = topView(root);
console.log(topViewResult); // Output: [4, 2, 1, 3, 7]
