function nextPermutation(arr) {
    let n = arr.length;
    let i = n - 2;

    // Step 1: Find the first ascending order violation from the right
    while (i >= 0 && arr[i] >= arr[i + 1]) {
        i--;
    }

    if (i >= 0) {
        // Step 2: Find the element larger than arr[i] to swap with
        let j = n - 1;
        while (arr[j] <= arr[i]) {
            j--;
        }
        // Step 3: Swap them
        [arr[i], arr[j]] = [arr[j], arr[i]];
    }

    // Step 4: Reverse the portion of the array from i+1 to end
    let start = i + 1;
    let end = n - 1;
    while (start < end) {
        [arr[start], arr[end]] = [arr[end], arr[start]];
        start++;
        end--;
    }

    return arr;
}

// Example usage
const arr = [1, 2, 3, 6, 5, 4];
console.log(nextPermutation(arr)); // Output: [1, 2, 4, 3, 5, 6]
