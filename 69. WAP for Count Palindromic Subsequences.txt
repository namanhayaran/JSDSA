function countPalindromicSubsequences(str) {
    const n = str.length;
    const mod = 1e9 + 7;
    const dp = Array.from({length: n}, () => Array(n).fill(0));

    // All single length substrings are palindromes
    for (let i = 0; i < n; i++) {
        dp[i][i] = 1;
    }

    // Fill the dp array for substrings of length 2 to n
    for (let length = 2; length <= n; length++) {
        for (let i = 0; i <= n - length; i++) {
            let j = i + length - 1;

            if (str[i] === str[j]) {
                dp[i][j] = dp[i + 1][j] + dp[i][j - 1] + 1;
            } else {
                dp[i][j] = dp[i + 1][j] + dp[i][j - 1] - dp[i + 1][j - 1];
            }

            // Handle negative numbers due to modulo operation
            if (dp[i][j] < 0) {
                dp[i][j] += mod;
            }

            dp[i][j] %= mod;
        }
    }

    // Result is the number of palindromic subsequences for the whole string
    return dp[0][n - 1];
}

// Example usage
const str = "abcd";
console.log(countPalindromicSubsequences(str));  // Output: 4
