class ListNode {
    constructor(value) {
        this.value = value;
        this.next = null;
    }
}

function reverseLinkedList(head) {
    let prev = null;
    let current = head;
    let next = null;
    
    while (current !== null) {
        // Save the next node
        next = current.next;
        
        // Reverse the current node's pointer
        current.next = prev;
        
        // Move pointers one position ahead
        prev = current;
        current = next;
    }
    
    // At the end, prev will be the new head of the reversed list
    return prev;
}


// Function to create a linked list from an array
function createLinkedList(arr) {
    if (arr.length === 0) return null;
    
    let head = new ListNode(arr[0]);
    let current = head;
    
    for (let i = 1; i < arr.length; i++) {
        current.next = new ListNode(arr[i]);
        current = current.next;
    }
    
    return head;
}

// Function to print the linked list
function printLinkedList(head) {
    let current = head;
    let output = '';
    
    while (current !== null) {
        output += current.value + '->';
        current = current.next;
    }
    
    output += 'NULL';
    console.log(output);
}


// Example 1
let head1 = createLinkedList([1, 2, 3, 4]);
console.log('Original Linked List:');
printLinkedList(head1);

head1 = reverseLinkedList(head1);
console.log('Reversed Linked List:');
printLinkedList(head1);

// Example 2
let head2 = createLinkedList([1, 2, 3, 4, 5]);
console.log('Original Linked List:');
printLinkedList(head2);

head2 = reverseLinkedList(head2);
console.log('Reversed Linked List:');
printLinkedList(head2);
