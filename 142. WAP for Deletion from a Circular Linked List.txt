class Node {
    constructor(value) {
        this.value = value;
        this.next = null;
    }
}

class CircularLinkedList {
    constructor() {
        this.head = null;
    }

    // Method to append a node to the circular linked list
    append(value) {
        const newNode = new Node(value);
        if (!this.head) {
            this.head = newNode;
            newNode.next = this.head;
        } else {
            let current = this.head;
            while (current.next !== this.head) {
                current = current.next;
            }
            current.next = newNode;
            newNode.next = this.head;
        }
    }

    // Method to delete a node with a given value
    delete(value) {
        if (!this.head) {
            return;
        }

        let current = this.head;
        let previous = null;

        // If the node to be deleted is the head node
        if (current.value === value) {
            // Find the last node in the list
            while (current.next !== this.head) {
                current = current.next;
            }
            if (this.head === this.head.next) {
                this.head = null; // Only one node in the list
            } else {
                current.next = this.head.next;
                this.head = this.head.next;
            }
            return;
        }

        // Traverse the list to find the node to be deleted
        do {
            previous = current;
            current = current.next;
            if (current.value === value) {
                previous.next = current.next;
                return;
            }
        } while (current !== this.head);
    }

    // Method to display the circular linked list
    display() {
        if (!this.head) {
            console.log('List is empty');
            return;
        }

        let current = this.head;
        const values = [];
        do {
            values.push(current.value);
            current = current.next;
        } while (current !== this.head);

        console.log(values.join(' -> '));
    }
}

// Example usage
const cll = new CircularLinkedList();
cll.append(10);
cll.append(20);
cll.append(30);
cll.append(40);

console.log('Original list:');
cll.display();

cll.delete(20);
console.log('List after deleting 20:');
cll.display();

cll.delete(10);
console.log('List after deleting 10:');
cll.display();

cll.delete(30);
console.log('List after deleting 30:');
cll.display();

cll.delete(40);
console.log('List after deleting 40:');
cll.display();
