function rowWithMax1s(arr, n, m) {
    let maxRowIndex = -1; // Initialize with -1 to indicate no 1's found if that's the case
    let maxCount = 0;

    for (let i = 0; i < n; i++) {
        // Since rows are sorted, we can find the index of the first 1 in the row
        // This index is used to calculate the count of 1's in the row
        let indexOfFirstOne = arr[i].indexOf(1);

        if (indexOfFirstOne !== -1) { // If there is at least one '1' in the row
            let countOfOnes = m - indexOfFirstOne; // Calculate count of 1's in the row

            // If this row has more 1's than the current maximum, update maxCount and maxRowIndex
            if (countOfOnes > maxCount) {
                maxCount = countOfOnes;
                maxRowIndex = i;
            }
        }
    }

    return maxRowIndex;
}

// Example usage:
const N = 4, M = 4;
const Arr = [
    [0, 1, 1, 1],
    [0, 0, 1, 1],
    [1, 1, 1, 1],
    [0, 0, 0, 0]
];

console.log(rowWithMax1s(Arr, N, M)); // Output: 2
