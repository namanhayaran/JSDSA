class ListNode {
  constructor(val = 0, next = null) {
    this.val = val;
    this.next = next;
  }
}

function partition(start, end) {
  if (start == end || start == null || end == null) return start;

  let pivotPrev = start;
  let curr = start;
  let pivot = end.val;

  // iterate till one before the end, no need to iterate till the end because end is pivot
  while (start !== end) {
    if (start.val < pivot) {
      // keep tracks of last modified item
      pivotPrev = curr;
      let temp = curr.val;
      curr.val = start.val;
      start.val = temp;
      curr = curr.next;
    }
    start = start.next;
  }

  // swap the position of curr i.e. next suitable index and pivot
  let temp = curr.val;
  curr.val = pivot;
  end.val = temp;

  // return one previous to current because current is now pointing to pivot
  return pivotPrev;
}

function quickSortRec(start, end) {
  if (start == null || start === end || start === end.next) return;

  // split list and partition recurse
  let pivotPrev = partition(start, end);
  quickSortRec(start, pivotPrev);

  // if pivot is picked and moved to the start, that means start and pivot is same, so pick from next of pivot
  if (pivotPrev != null && pivotPrev == start)
    quickSortRec(pivotPrev.next, end);

  // if pivot is in between of the list, start from next of pivot, since we have pivotPrev, so pivotPrev.next should be pivot
  else if (pivotPrev != null && pivotPrev.next != null)
    quickSortRec(pivotPrev.next.next, end);
}

function quickSort(head) {
  // Get the tail (last node)
  let tail = head;
  while (tail != null && tail.next != null) {
    tail = tail.next;
  }
  
  quickSortRec(head, tail);
  return head;
}

// Helper function to print list
function printList(head) {
  let curr = head;
  while (curr != null) {
    console.log(curr.val);
    curr = curr.next;
  }
}

// Example usage:
let head = new ListNode(1, new ListNode(6, new ListNode(2)));
head = quickSort(head);
printList(head);  // Output: 1 2 6
