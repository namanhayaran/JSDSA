function search(P, T) {
    const d = 256; // Number of characters in the input alphabet (for ASCII)
    const q = 101; // A prime number used as a modulus to reduce large hash values
    const m = P.length;
    const n = T.length;
    let p = 0; // Hash value for pattern
    let t = 0; // Hash value for text
    let h = 1;
    let foundAtLeastOne = false;

    // Calculate the value of h = pow(d, m-1) % q
    for (let i = 0; i < m - 1; i++) {
        h = (h * d) % q;
    }

    // Calculate the hash value of the pattern and first window of the text
    for (let i = 0; i < m; i++) {
        p = (d * p + P.charCodeAt(i)) % q;
        t = (d * t + T.charCodeAt(i)) % q;
    }

    // Slide the pattern over text one by one
    for (let i = 0; i <= n - m; i++) {
        // Check the hash values of current window of text and pattern
        if (p === t) {
            // Check for characters one by one
            let match = true;
            for (let j = 0; j < m; j++) {
                if (T[i + j] !== P[j]) {
                    match = false;
                    break;
                }
            }

            // If the pattern is found
            if (match) {
                console.log(`Pattern found at index ${i}`);
                foundAtLeastOne = true;
            }
        }

        // Calculate hash value for the next window of text
        // Remove leading digit, add trailing digit
        if (i < n - m) {
            t = (d * (t - T.charCodeAt(i) * h) + T.charCodeAt(i + m)) % q;

            // We might get negative values of t, converting it to positive
            if (t < 0) 
                t = (t + q);
        }
    }

    if (!foundAtLeastOne) {
        console.log("Pattern not found");
    }
}

// Test the function with provided examples
console.log("Test 1:");
search("TEST", "THIS IS A TEST TEXT");
console.log("Test 2:");
search("AABA", "AABAACAADAABAABA");
