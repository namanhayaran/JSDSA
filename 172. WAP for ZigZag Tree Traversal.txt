class TreeNode {
    constructor(val) {
        this.val = val;
        this.left = this.right = null;
    }
}

function zigzagLevelOrder(root) {
    if (!root) return [];

    let result = [];
    let queue = [root];
    let leftToRight = true;

    while (queue.length > 0) {
        let levelSize = queue.length;
        let currentLevel = [];

        for (let i = 0; i < levelSize; i++) {
            let currentNode = queue.shift();

            // Add the current node's value to the current level
            currentLevel.push(currentNode.val);

            // Add the children of the current node to the queue
            if (currentNode.left) queue.push(currentNode.left);
            if (currentNode.right) queue.push(currentNode.right);
        }

        // If the current level should be right to left, reverse it
        if (!leftToRight) {
            currentLevel.reverse();
        }

        // Add the current level to the result
        result.push(...currentLevel);

        // Flip the direction for the next level
        leftToRight = !leftToRight;
    }

    return result;
}

// Example Usage:
// Construct the binary tree
//       1
//     /   \
//    2     3
//   / \   / \
//  4   5 6   7

let root = new TreeNode(1);
root.left = new TreeNode(2);
root.right = new TreeNode(3);
root.left.left = new TreeNode(4);
root.left.right = new TreeNode(5);
root.right.left = new TreeNode(6);
root.right.right = new TreeNode(7);

console.log(zigzagLevelOrder(root)); // Output: [1, 3, 2, 4, 5, 6, 7]
