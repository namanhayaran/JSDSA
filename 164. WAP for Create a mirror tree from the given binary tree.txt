class TreeNode {
  constructor(value, left = null, right = null) {
    this.value = value;
    this.left = left;
    this.right = right;
  }
}

function mirrorTree(node) {
  if (node === null) {
    return null;
  }

  // Create a new node with the same value as the current node
  const newNode = new TreeNode(node.value);

  // Recursively create the mirror image of the left and right subtrees
  newNode.left = mirrorTree(node.right);
  newNode.right = mirrorTree(node.left);

  return newNode;
}

// Helper function to print the tree in order
function printInOrder(node) {
  if (node === null) {
    return;
  }
  printInOrder(node.left);
  console.log(node.value);
  printInOrder(node.right);
}

// Example usage:
const root = new TreeNode(1);
root.left = new TreeNode(2);
root.right = new TreeNode(3);
root.left.left = new TreeNode(4);
root.left.right = new TreeNode(5);

console.log("Original tree in-order:");
printInOrder(root);

const mirroredRoot = mirrorTree(root);

console.log("Mirrored tree in-order:");
printInOrder(mirroredRoot);
