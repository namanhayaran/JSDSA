class Job {
    constructor(start, finish, profit) {
        this.start = start;
        this.finish = finish;
        this.profit = profit;
    }
}

// A utility function that returns the latest job (before the current job) that doesn't overlap with the current job.
function binarySearch(jobs, index) {
    let low = 0, high = index - 1;

    while (low <= high) {
        let mid = Math.floor((low + high) / 2);
        if (jobs[mid].finish <= jobs[index].start) {
            if (jobs[mid + 1].finish <= jobs[index].start) {
                low = mid + 1;
            } else {
                return mid;
            }
        } else {
            high = mid - 1;
        }
    }

    return -1;
}

function findMaxProfit(jobs) {
    // Sort jobs according to finish times
    jobs.sort((a, b) => a.finish - b.finish);

    // Create an array to store solutions of subproblems. dp[i] stores the profit for jobs till jobs[i] (including jobs[i])
    let n = jobs.length;
    let dp = new Array(n).fill(0);

    dp[0] = jobs[0].profit;

    // Fill dp[] using above recursive formula
    for (let i = 1; i < n; i++) {
        // Find profit including the current job
        let inclProfit = jobs[i].profit;
        let l = binarySearch(jobs, i);
        if (l != -1) {
            inclProfit += dp[l];
        }

        // Store maximum of including and excluding
        dp[i] = Math.max(inclProfit, dp[i - 1]);
    }

    // The last entry of dp[] table is the result
    return dp[n - 1];
}

// Example usage:
const jobs = [
    new Job(1, 2, 50),
    new Job(3, 5, 20),
    new Job(6, 19, 100),
    new Job(2, 100, 200)
];

console.log("The maximum profit is " + findMaxProfit(jobs));
