function findMaxValue(mat) {
    const N = mat.length;
    // Initialize the value of the result
    let maxValue = Number.MIN_SAFE_INTEGER;
    
    // maxArr will hold the maximum value found so far as we traverse from the bottom right corner
    let maxArr = Array.from(Array(N), () => new Array(N));
    
    // Initialize the last cell
    maxArr[N-1][N-1] = mat[N-1][N-1];
    
    // Preprocess last row and last column
    let maxV = mat[N-1][N-1]; // Initialize max
    for (let j = N - 2; j >= 0; j--) {
        if (mat[N-1][j] > maxV) maxV = mat[N-1][j];
        maxArr[N-1][j] = maxV;
    }
    maxV = mat[N-1][N-1];  // Reset max
    for (let i = N - 2; i >= 0; i--) {
        if (mat[i][N-1] > maxV) maxV = mat[i][N-1];
        maxArr[i][N-1] = maxV;
    }
    
    // Preprocess rest of the matrix from bottom
    for (let i = N-2; i >= 0; i--) {
        for (let j = N-2; j >= 0; j--) {
            // Update maxValue
            if (maxArr[i+1][j+1] - mat[i][j] > maxValue) {
                maxValue = maxArr[i+1][j+1] - mat[i][j];
            }
            
            // Update maxArr (Store max of mat[i][j], maxArr[i][j+1], maxArr[i+1][j] and maxArr[i+1][j+1])
            maxArr[i][j] = Math.max(mat[i][j], maxArr[i][j+1], maxArr[i+1][j], maxArr[i+1][j+1]);
        }
    }
    
    return maxValue;
}

// Example usage:
const mat = [
    [1, 2, -1, -4, -20],
    [-8, -3, 4, 2, 1],
    [3, 8, 6, 1, 3],
    [-4, -1, 1, 7, -6],
    [0, -4, 10, -5, 1]
];

console.log(findMaxValue(mat)); // Output: 18
