class ListNode {
  constructor(val, next = null) {
    this.val = val;
    this.next = next;
  }
}

class MinHeap {
  constructor() {
    this.heap = [];
  }

  getParentIndex(index) {
    return Math.floor((index - 1) / 2);
  }

  getLeftChildIndex(index) {
    return 2 * index + 1;
  }

  getRightChildIndex(index) {
    return 2 * index + 2;
  }

  swap(index1, index2) {
    [this.heap[index1], this.heap[index2]] = [this.heap[index2], this.heap[index1]];
  }

  insert(node) {
    this.heap.push(node);
    this.heapifyUp();
  }

  heapifyUp() {
    let index = this.heap.length - 1;
    while (index > 0) {
      const parentIndex = this.getParentIndex(index);
      if (this.heap[parentIndex].val <= this.heap[index].val) break;
      this.swap(index, parentIndex);
      index = parentIndex;
    }
  }

  extractMin() {
    if (this.heap.length === 0) return null;
    if (this.heap.length === 1) return this.heap.pop();
    
    const root = this.heap[0];
    this.heap[0] = this.heap.pop();
    this.heapifyDown();
    return root;
  }

  heapifyDown() {
    let index = 0;
    while (this.getLeftChildIndex(index) < this.heap.length) {
      const leftChildIndex = this.getLeftChildIndex(index);
      const rightChildIndex = this.getRightChildIndex(index);
      let smallestChildIndex = leftChildIndex;
      
      if (rightChildIndex < this.heap.length && this.heap[rightChildIndex].val < this.heap[leftChildIndex].val) {
        smallestChildIndex = rightChildIndex;
      }

      if (this.heap[index].val <= this.heap[smallestChildIndex].val) break;

      this.swap(index, smallestChildIndex);
      index = smallestChildIndex;
    }
  }
}

function mergeKLists(lists) {
  const minHeap = new MinHeap();
  for (const list of lists) {
    if (list) {
      minHeap.insert(list);
    }
  }

  const dummy = new ListNode(0);
  let current = dummy;

  while (minHeap.heap.length > 0) {
    const smallestNode = minHeap.extractMin();
    current.next = smallestNode;
    current = current.next;
    if (smallestNode.next) {
      minHeap.insert(smallestNode.next);
    }
  }

  return dummy.next;
}

// Example usage:
const lists = [
  new ListNode(1, new ListNode(2, new ListNode(3
