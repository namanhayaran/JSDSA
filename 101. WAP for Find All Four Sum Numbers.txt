function fourSum(arr, n, k) {
    // Sort the array
    arr.sort((a, b) => a - b);
    const result = [];

    // Helper function to avoid adding duplicate quadruples
    function addQuadruple(quad) {
        const lastQuad = result[result.length - 1];
        if (!lastQuad || quad[0] !== lastQuad[0] || quad[1] !== lastQuad[1] || quad[2] !== lastQuad[2] || quad[3] !== lastQuad[3]) {
            result.push(quad);
        }
    }

    // Iterate through the array with four pointers
    for (let i = 0; i < n - 3; i++) {
        if (i > 0 && arr[i] === arr[i - 1]) continue; // Skip duplicates for the first number

        for (let j = i + 1; j < n - 2; j++) {
            if (j > i + 1 && arr[j] === arr[j - 1]) continue; // Skip duplicates for the second number

            let left = j + 1;
            let right = n - 1;

            while (left < right) {
                const sum = arr[i] + arr[j] + arr[left] + arr[right];

                if (sum === k) {
                    addQuadruple([arr[i], arr[j], arr[left], arr[right]]);
                    while (left < right && arr[left] === arr[left + 1]) left++; // Skip duplicates for the third number
                    while (left < right && arr[right] === arr[right - 1]) right--; // Skip duplicates for the fourth number
                    left++;
                    right--;
                } else if (sum < k) {
                    left++;
                } else {
                    right--;
                }
            }
        }
    }

    return result;
}

// Example usage:
const arr = [0, 0, 2, 1, 1];
const n = 5;
const k = 3;
const result = fourSum(arr, n, k);
console.log(result); // Output: [[0, 0, 1, 2]]
