class Node {
    constructor(data) {
        this.data = data;
        this.next = null;
        this.prev = null;
    }
}

class MinHeap {
    constructor() {
        this.heap = [];
    }

    insert(node) {
        this.heap.push(node);
        this.bubbleUp(this.heap.length - 1);
    }

    extractMin() {
        if (this.heap.length === 1) return this.heap.pop();

        const min = this.heap[0];
        this.heap[0] = this.heap.pop();
        this.bubbleDown(0);

        return min;
    }

    bubbleUp(index) {
        while (index > 0) {
            const parentIndex = Math.floor((index - 1) / 2);
            if (this.heap[parentIndex].data <= this.heap[index].data) break;

            [this.heap[parentIndex], this.heap[index]] = [this.heap[index], this.heap[parentIndex]];
            index = parentIndex;
        }
    }

    bubbleDown(index) {
        const lastIndex = this.heap.length - 1;
        while (true) {
            const leftChildIndex = 2 * index + 1;
            const rightChildIndex = 2 * index + 2;
            let smallestIndex = index;

            if (leftChildIndex <= lastIndex && this.heap[leftChildIndex].data < this.heap[smallestIndex].data) {
                smallestIndex = leftChildIndex;
            }

            if (rightChildIndex <= lastIndex && this.heap[rightChildIndex].data < this.heap[smallestIndex].data) {
                smallestIndex = rightChildIndex;
            }

            if (smallestIndex === index) break;

            [this.heap[smallestIndex], this.heap[index]] = [this.heap[index], this.heap[smallestIndex]];
            index = smallestIndex;
        }
    }

    size() {
        return this.heap.length;
    }
}

function sortKSortedDoublyLinkedList(head, k) {
    if (!head) return head;

    const heap = new MinHeap();
    let newHead = null, newTail = null;

    // Step 1: Traverse first k+1 elements and add to the heap
    let current = head;
    for (let i = 0; current !== null && i <= k; i++) {
        heap.insert(current);
        current = current.next;
    }

    // Step 2: Continue processing until heap is empty
    while (heap.size() > 0) {
        const minNode = heap.extractMin();

        // Set new head if not set
        if (!newHead) {
            newHead = minNode;
            newTail = minNode;
            newTail.prev = null;
        } else {
            newTail.next = minNode;
            minNode.prev = newTail;
            newTail = minNode;
        }

        // Insert next element from unsorted part of list to the heap
        if (current !== null) {
            heap.insert(current);
            current = current.next;
        }
    }

    newTail.next = null;
    return newHead;
}

// Utility functions for testing

function printList(head) {
    let current = head;
    const result = [];
    while (current) {
        result.push(current.data);
        current = current.next;
    }
    console.log(result.join(' -> '));
}

function createDoublyLinkedList(arr) {
    let head = null, tail = null;
    for (let value of arr) {
        const newNode = new Node(value);
        if (!head) {
            head = newNode;
            tail = newNode;
        } else {
            tail.next = newNode;
            newNode.prev = tail;
            tail = newNode;
        }
    }
    return head;
}

// Test the function

const arr = [3, 6, 2, 12, 56, 8];
const k = 2;
const head = createDoublyLinkedList(arr);

console.log("Original List:");
printList(head);

const sortedHead = sortKSortedDoublyLinkedList(head, k);

console.log("Sorted List:");
printList(sortedHead);
