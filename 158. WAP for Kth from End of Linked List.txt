class ListNode {
  constructor(value) {
    this.value = value;
    this.next = null;
  }
}

function findKthFromEnd(head, k) {
  let fast = head;
  let slow = head;

  // Move the fast pointer k steps ahead
  for (let i = 0; i < k; i++) {
    if (fast === null) return -1; // If k is more than the number of nodes
    fast = fast.next;
  }

  // Move both fast and slow pointers until fast reaches the end
  while (fast !== null) {
    fast = fast.next;
    slow = slow.next;
  }

  return slow.value;
}

// Helper function to create a linked list from an array
function createLinkedList(values) {
  let head = new ListNode(values[0]);
  let current = head;
  for (let i = 1; i < values.length; i++) {
    current.next = new ListNode(values[i]);
    current = current.next;
  }
  return head;
}

// Example usage
const n = 9;
const k = 2;
const values = [1, 2, 3, 4, 5, 6, 7, 8, 9];
const head = createLinkedList(values);
const result = findKthFromEnd(head, k);

console.log(result); // Output: 8
