function longestPrefixSuffix(s) {
    const n = s.length;
    let lps = new Array(n).fill(0); // LPS array
    let len = 0; // length of the previous longest prefix suffix
    let i = 1; // the current position to compute lps
    
    while (i < n) {
        if (s[i] === s[len]) {
            len++;
            lps[i] = len;
            i++;
        } else { // (s[i] != s[len])
            if (len !== 0) {
                // This is tricky; consider the example "abababca", when i = 7 and len = 3
                len = lps[len - 1];
                // Also, note that we do not increment i here
            } else { // if (len === 0)
                lps[i] = 0;
                i++;
            }
        }
    }
    
    // The longest proper prefix which is also suffix is at the last of the LPS array
    // but it shouldn't be the entire string
    return lps[n - 1];
}

// Example usage
const s = "abab";
console.log(longestPrefixSuffix(s)); // Outputs 2
