class Node {
    constructor(data) {
        this.data = data;
        this.left = null;
        this.right = null;
    }
}

function leftView(root) {
    if (!root) return [];

    let result = [];
    let queue = [];
    queue.push(root);

    while (queue.length > 0) {
        // Number of nodes at current level
        let n = queue.length;

        // Traverse all nodes of the current level
        for (let i = 0; i < n; i++) {
            let node = queue.shift();

            // If this is the first node of this level
            if (i === 0) {
                result.push(node.data);
            }

            // Add left node to queue
            if (node.left) {
                queue.push(node.left);
            }

            // Add right node to queue
            if (node.right) {
                queue.push(node.right);
            }
        }
    }

    return result;
}

// Example usage:

// Constructing the binary tree
let root = new Node(1);
root.left = new Node(2);
root.right = new Node(3);
root.left.left = new Node(4);
root.left.right = new Node(5);
root.right.left = new Node(6);
root.right.right = new Node(7);
root.left.left.right = new Node(8);

// Getting the left view of the binary tree
console.log(leftView(root)); // Output: [1, 2, 4, 8]
