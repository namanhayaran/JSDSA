function mergeAndCount(arr, temp, left, mid, right) {
    let i = left, j = mid, k = left, inv_count = 0;
    while ((i <= mid - 1) && (j <= right)) {
        if (arr[i] <= arr[j]) {
            temp[k++] = arr[i++];
        } else {
            temp[k++] = arr[j++];
            inv_count = inv_count + (mid - i);
        }
    }
    while (i <= mid - 1) temp[k++] = arr[i++];
    while (j <= right) temp[k++] = arr[j++];
    for (i = left; i <= right; i++) arr[i] = temp[i];
    return inv_count;
}

function mergeSortAndCount(arr, temp, left, right) {
    let mid, inv_count = 0;
    if (right > left) {
        mid = Math.floor((right + left) / 2);
        inv_count += mergeSortAndCount(arr, temp, left, mid);
        inv_count += mergeSortAndCount(arr, temp, mid + 1, right);
        inv_count += mergeAndCount(arr, temp, left, mid + 1, right);
    }
    return inv_count;
}

function countInversions(arr) {
    let temp = [];
    return mergeSortAndCount(arr, temp, 0, arr.length - 1);
}

// Example usage:
const arr = [1, 20, 6, 4, 5];
console
