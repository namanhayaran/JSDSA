class Node {
    constructor(data) {
        this.data = data;
        this.left = null;
        this.right = null;
    }
}

function bottomView(root) {
    if (!root) return [];

    let bottomViewMap = new Map(); // To store the last node at each horizontal distance
    let queue = []; // For level order traversal
    let minHorizontalDistance = 0;
    let maxHorizontalDistance = 0;

    // Start BFS from the root node
    queue.push({ node: root, hd: 0 });

    while (queue.length > 0) {
        let { node, hd } = queue.shift();

        // Update the map with the current node's data for this horizontal distance
        bottomViewMap.set(hd, node.data);

        // Track the min and max horizontal distances to determine the range
        minHorizontalDistance = Math.min(minHorizontalDistance, hd);
        maxHorizontalDistance = Math.max(maxHorizontalDistance, hd);

        // If there is a left child, add it to the queue with horizontal distance - 1
        if (node.left) {
            queue.push({ node: node.left, hd: hd - 1 });
        }

        // If there is a right child, add it to the queue with horizontal distance + 1
        if (node.right) {
            queue.push({ node: node.right, hd: hd + 1 });
        }
    }

    // Prepare the result array using the recorded min and max horizontal distances
    let bottomViewArray = [];
    for (let i = minHorizontalDistance; i <= maxHorizontalDistance; i++) {
        if (bottomViewMap.has(i)) {
            bottomViewArray.push(bottomViewMap.get(i));
        }
    }

    return bottomViewArray;
}

// Example usage:
let root = new Node(20);
root.left = new Node(8);
root.right = new Node(22);
root.left.left = new Node(5);
root.left.right = new Node(3);
root.right.left = new Node(4);
root.right.right = new Node(25);
root.left.right.left = new Node(10);
root.left.right.right = new Node(14);

console.log(bottomView(root)); // Output: [5, 10, 4, 14, 25]
