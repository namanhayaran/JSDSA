class Node {
    constructor(data) {
        this.data = data;
        this.left = null;
        this.right = null;
    }
}

function diagonalTraversal(root) {
    if (!root) return [];

    let result = [];
    let queue = [];
    queue.push(root);

    while (queue.length > 0) {
        let size = queue.length;
        let diagonal = [];

        for (let i = 0; i < size; i++) {
            let node = queue.shift();

            // Traverse the current diagonal
            while (node) {
                diagonal.push(node.data);

                // If left child exists, add it to the queue for future diagonals
                if (node.left) {
                    queue.push(node.left);
                }

                // Move to the right child to stay in the same diagonal
                node = node.right;
            }
        }
        result.push(diagonal);
    }

    return result;
}

// Example Usage
let root = new Node(1);
root.left = new Node(2);
root.right = new Node(3);
root.left.left = new Node(4);
root.left.right = new Node(5);
root.right.right = new Node(6);

console.log(diagonalTraversal(root)); // Output: [[1, 3, 6], [2, 5], [4]]
