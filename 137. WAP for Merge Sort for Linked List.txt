class ListNode {
  constructor(value = 0, next = null) {
    this.value = value;
    this.next = next;
  }
}

class Solution {
    // Function to sort the given linked list using Merge Sort.
    mergeSort(head) {
        // Base case: if head is null or there is only one element in the linked list
        if (head === null || head.next === null) {
            return head;
        }

        // Find the middle of the linked list
        let middle = this.findMiddle(head);
        let nextOfMiddle = middle.next;

        // Set the next of middle node to null to split the linked list into two halves
        middle.next = null;

        // Recursively sort the left and right halves
        let left = this.mergeSort(head);
        let right = this.mergeSort(nextOfMiddle);

        // Merge the sorted halves
        return this.merge(left, right);
    }

    // Function to find the middle of the linked list
    findMiddle(head) {
        if (head === null) return null;

        let slow = head;
        let fast = head;

        while (fast.next !== null && fast.next.next !== null) {
            slow = slow.next;
            fast = fast.next.next;
        }

        return slow;
    }

    // Function to merge two sorted linked lists
    merge(left, right) {
        let dummy = new ListNode();
        let current = dummy;

        while (left !== null && right !== null) {
            if (left.value < right.value) {
                current.next = left;
                left = left.next;
            } else {
                current.next = right;
                right = right.next;
            }
            current = current.next;
        }

        // If there are remaining nodes in left or right, append them
        if (left !== null) {
            current.next = left;
        } else if (right !== null) {
            current.next = right;
        }

        return dummy.next;
    }
}

// Helper function to create a linked list from an array
function createLinkedList(arr) {
    let head = null;
    let tail = null;
    for (let value of arr) {
        let newNode = new ListNode(value);
        if (head === null) {
            head = newNode;
            tail = newNode;
        } else {
            tail.next = newNode;
            tail = newNode;
        }
    }
    return head;
}

// Helper function to print the linked list
function printLinkedList(head) {
    let current = head;
    while (current !== null) {
        process.stdout.write(current.value + " ");
        current = current.next;
    }
    console.log();
}

// Example usage
let arr = [3, 5, 2, 4, 1];
let linkedList = createLinkedList(arr);
console.log("Original Linked List:");
printLinkedList(linkedList);

let solution = new Solution();
let sortedLinkedList = solution.mergeSort(linkedList);

console.log("Sorted Linked List:");
printLinkedList(sortedLinkedList);
