class ListNode {
  constructor(data) {
    this.data = data;
    this.next = null;
  }
}

function detectLoop(head) {
  if (!head || !head.next) {
    return -1;
  }

  let slow = head;
  let fast = head;

  // Step 1: Detect loop using slow and fast pointers
  while (fast !== null && fast.next !== null) {
    slow = slow.next;
    fast = fast.next.next;

    if (slow === fast) {
      break;
    }
  }

  // If no loop is found, return -1
  if (fast === null || fast.next === null) {
    return -1;
  }

  // Step 2: Find the start of the loop
  slow = head;
  while (slow !== fast) {
    slow = slow.next;
    fast = fast.next;
  }

  return slow.data;  // The start of the loop
}

// Example usage:

// Creating a linked list with a loop
const head = new ListNode(1);
head.next = new ListNode(2);
head.next.next = new ListNode(3);
head.next.next.next = new ListNode(4);
head.next.next.next.next = new ListNode(5);
head.next.next.next.next.next = head.next.next;  // Creating a loop at node with data 3

const result = detectLoop(head);
console.log(result);  // Output: 3
