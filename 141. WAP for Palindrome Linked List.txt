class ListNode {
  constructor(value = 0, next = null) {
    this.value = value;
    this.next = next;
  }
}

function isPalindrome(head) {
  if (head == null || head.next == null) {
    return true;
  }

  // Step 1: Find the middle of the linked list
  let slow = head;
  let fast = head;
  while (fast !== null && fast.next !== null) {
    slow = slow.next;
    fast = fast.next.next;
  }

  // Step 2: Reverse the second half of the linked list
  let prev = null;
  while (slow !== null) {
    let next = slow.next;
    slow.next = prev;
    prev = slow;
    slow = next;
  }

  // Step 3: Compare the first half with the reversed second half
  let left = head;
  let right = prev; // prev now points to the head of the reversed second half
  while (right !== null) {
    if (left.value !== right.value) {
      return false;
    }
    left = left.next;
    right = right.next;
  }

  // The linked list is a palindrome
  return true;
}

// Helper function to create a linked list from an array
function createLinkedList(arr) {
  let dummy = new ListNode();
  let current = dummy;
  for (let value of arr) {
    current.next = new ListNode(value);
    current = current.next;
  }
  return dummy.next;
}

// Example usage:
let values = [1, 2, 1];
let linkedList = createLinkedList(values);
console.log(isPalindrome(linkedList)); // Output: true (1)
