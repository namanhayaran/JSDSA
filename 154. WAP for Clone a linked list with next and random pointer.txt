class Node {
    constructor(val, next = null, random = null) {
        this.val = val;
        this.next = next;
        this.random = random;
    }
}

function copyRandomList(head) {
    if (head === null) {
        return null;
    }

    // Step 1: Create new nodes and interleave them with the original nodes
    let current = head;
    while (current !== null) {
        let newNode = new Node(current.val, current.next, null);
        current.next = newNode;
        current = newNode.next;
    }

    // Step 2: Set the random pointers for the new nodes
    current = head;
    while (current !== null) {
        if (current.random !== null) {
            current.next.random = current.random.next;
        }
        current = current.next.next;
    }

    // Step 3: Separate the interleaved list into the original and the copied list
    current = head;
    let newHead = head.next;
    let copy = newHead;
    while (current !== null) {
        current.next = current.next.next;
        if (copy.next !== null) {
            copy.next = copy.next.next;
        }
        current = current.next;
        copy = copy.next;
    }

    return newHead;
}

// Helper function to print the list for debugging
function printList(head) {
    let current = head;
    while (current !== null) {
        const randomVal = current.random ? current.random.val : "null";
        console.log(`Node val: ${current.val}, Random val: ${randomVal}`);
        current = current.next;
    }
}

// Example usage
let node1 = new Node(1);
let node2 = new Node(2);
let node3 = new Node(3);

node1.next = node2;
node2.next = node3;

node1.random = node3;
node2.random = node1;
node3.random = node2;

let copiedListHead = copyRandomList(node1);
printList(copiedListHead);
