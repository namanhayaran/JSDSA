class Solution {
    // Function to count inversions in the array.
    inversionCount(arr, n) {
        return this.mergeSortAndCount(arr, 0, n - 1);
    }

    mergeSortAndCount(arr, left, right) {
        let count = 0;
        if (left < right) {
            const mid = Math.floor((left + right) / 2);
            
            count += this.mergeSortAndCount(arr, left, mid);
            count += this.mergeSortAndCount(arr, mid + 1, right);
            count += this.mergeAndCount(arr, left, mid, right);
        }
        return count;
    }

    mergeAndCount(arr, left, mid, right) {
        // Create temporary arrays
        const leftArr = arr.slice(left, mid + 1);
        const rightArr = arr.slice(mid + 1, right + 1);
        
        let i = 0, j = 0, k = left, swaps = 0;

        while (i < leftArr.length && j < rightArr.length) {
            if (leftArr[i] <= rightArr[j]) {
                arr[k++] = leftArr[i++];
            } else {
                arr[k++] = rightArr[j++];
                swaps += (mid + 1) - (left + i); // Number of elements remaining in the left array
            }
        }

        // Copy remaining elements of leftArr, if any
        while (i < leftArr.length) {
            arr[k++] = leftArr[i++];
        }

        // Copy remaining elements of rightArr, if any
        while (j < rightArr.length) {
            arr[k++] = rightArr[j++];
        }

        return swaps;
    }
}

// Example usage:
const solution = new Solution();
const arr1 = [2, 4, 1, 3, 5];
const n1 = arr1.length;
console.log(solution.inversionCount(arr1, n1)); // Output: 3

const arr2 = [2, 3, 4, 5, 6];
const n2 = arr2.length;
console.log(solution.inversionCount(arr2, n2)); // Output: 0
