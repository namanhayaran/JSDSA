class ListNode {
    constructor(val = 0, next = null) {
        this.val = val;
        this.next = next;
    }
}

class Solution {
    findIntersection(head1, head2) {
        let dummy = new ListNode();
        let tail = dummy;
        
        while (head1 !== null && head2 !== null) {
            if (head1.val < head2.val) {
                head1 = head1.next;
            } else if (head1.val > head2.val) {
                head2 = head2.next;
            } else {
                tail.next = new ListNode(head1.val);
                tail = tail.next;
                head1 = head1.next;
                head2 = head2.next;
            }
        }
        
        return dummy.next;
    }
}

// Helper function to create a linked list from an array
function createLinkedList(arr) {
    let dummy = new ListNode();
    let tail = dummy;
    for (let val of arr) {
        tail.next = new ListNode(val);
        tail = tail.next;
    }
    return dummy.next;
}

// Helper function to print the linked list
function printLinkedList(head) {
    let result = [];
    while (head !== null) {
        result.push(head.val);
        head = head.next;
    }
    console.log(result.join(' '));
}

// Example usage:
let list1 = createLinkedList([1, 2, 3, 4, 6]);
let list2 = createLinkedList([2, 4, 6, 8]);

let solution = new Solution();
let intersection = solution.findIntersection(list1, list2);
printLinkedList(intersection); // Output: 2 4 6
